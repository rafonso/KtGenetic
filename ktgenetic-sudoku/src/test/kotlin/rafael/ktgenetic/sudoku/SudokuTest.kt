package rafael.ktgenetic.sudoku

import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import java.lang.IllegalArgumentException
import kotlin.math.sqrt
import kotlin.test.assertEquals

val grid4Symbols = listOf(1, 2, 3, 4)
val grid9Symbols = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9)
val grid16Symbols =
    listOf(0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10)

class SudokuTest {

    private fun assertBox(boxes: List<List<Position>>, boxPosition: Int, vararg expected: Pair<Int, Int>) {
        val expectedPositions = expected.map { Position(it.first, it.second) }

        Assertions.assertEquals(expectedPositions, boxes[boxPosition]) {
            "Size ${boxes.size}, Box $boxPosition"
        }
    }

    @Test
    fun boxesPositionsSizeNotSquare() {
        assertThrows<IllegalArgumentException> { getBoxesPositions(5) }
    }

    @Test
    fun boxesPositionsSize4() {
        val boxes = getBoxesPositions(4)

        assertBox(boxes, 0, 0 to 0, 0 to 1, 1 to 0, 1 to 1)
        assertBox(boxes, 1, 0 to 2, 0 to 3, 1 to 2, 1 to 3)
        /////////////////////
        assertBox(boxes, 2, 2 to 0, 2 to 1, 3 to 0, 3 to 1)
        assertBox(boxes, 3, 2 to 2, 2 to 3, 3 to 2, 3 to 3)
    }

    @Test
    fun boxesPositionsSize9() {
        val boxes = getBoxesPositions(9)

        assertBox(boxes, 0, 0 to 0, 0 to 1, 0 to 2, 1 to 0, 1 to 1, 1 to 2, 2 to 0, 2 to 1, 2 to 2)
        assertBox(boxes, 1, 0 to 3, 0 to 4, 0 to 5, 1 to 3, 1 to 4, 1 to 5, 2 to 3, 2 to 4, 2 to 5)
        assertBox(boxes, 2, 0 to 6, 0 to 7, 0 to 8, 1 to 6, 1 to 7, 1 to 8, 2 to 6, 2 to 7, 2 to 8)
        /////////////////////
        assertBox(boxes, 3, 3 to 0, 3 to 1, 3 to 2, 4 to 0, 4 to 1, 4 to 2, 5 to 0, 5 to 1, 5 to 2)
        assertBox(boxes, 4, 3 to 3, 3 to 4, 3 to 5, 4 to 3, 4 to 4, 4 to 5, 5 to 3, 5 to 4, 5 to 5)
        assertBox(boxes, 5, 3 to 6, 3 to 7, 3 to 8, 4 to 6, 4 to 7, 4 to 8, 5 to 6, 5 to 7, 5 to 8)
        /////////////////////
        assertBox(boxes, 6, 6 to 0, 6 to 1, 6 to 2, 7 to 0, 7 to 1, 7 to 2, 8 to 0, 8 to 1, 8 to 2)
        assertBox(boxes, 7, 6 to 3, 6 to 4, 6 to 5, 7 to 3, 7 to 4, 7 to 5, 8 to 3, 8 to 4, 8 to 5)
        assertBox(boxes, 8, 6 to 6, 6 to 7, 6 to 8, 7 to 6, 7 to 7, 7 to 8, 8 to 6, 8 to 7, 8 to 8)
    }

    @Test
    fun boxesPositionsSize16() {
        val boxes = getBoxesPositions(16)

        assertBox(
            boxes,
            0x0,
            0x0 to 0x0,
            0x0 to 0x1,
            0x0 to 0x2,
            0x0 to 0x3,
            0x1 to 0x0,
            0x1 to 0x1,
            0x1 to 0x2,
            0x1 to 0x3,
            0x2 to 0x0,
            0x2 to 0x1,
            0x2 to 0x2,
            0x2 to 0x3,
            0x3 to 0x0,
            0x3 to 0x1,
            0x3 to 0x2,
            0x3 to 0x3
        )
        assertBox(
            boxes,
            0x1,
            0x0 to 0x4,
            0x0 to 0x5,
            0x0 to 0x6,
            0x0 to 0x7,
            0x1 to 0x4,
            0x1 to 0x5,
            0x1 to 0x6,
            0x1 to 0x7,
            0x2 to 0x4,
            0x2 to 0x5,
            0x2 to 0x6,
            0x2 to 0x7,
            0x3 to 0x4,
            0x3 to 0x5,
            0x3 to 0x6,
            0x3 to 0x7
        )
        assertBox(
            boxes,
            0x2,
            0x0 to 0x8,
            0x0 to 0x9,
            0x0 to 0xA,
            0x0 to 0xB,
            0x1 to 0x8,
            0x1 to 0x9,
            0x1 to 0xA,
            0x1 to 0xB,
            0x2 to 0x8,
            0x2 to 0x9,
            0x2 to 0xA,
            0x2 to 0xB,
            0x3 to 0x8,
            0x3 to 0x9,
            0x3 to 0xA,
            0x3 to 0xB
        )
        assertBox(
            boxes,
            0x3,
            0x0 to 0xC,
            0x0 to 0xD,
            0x0 to 0xE,
            0x0 to 0xF,
            0x1 to 0xC,
            0x1 to 0xD,
            0x1 to 0xE,
            0x1 to 0xF,
            0x2 to 0xC,
            0x2 to 0xD,
            0x2 to 0xE,
            0x2 to 0xF,
            0x3 to 0xC,
            0x3 to 0xD,
            0x3 to 0xE,
            0x3 to 0xF
        )
        ///////////////////////////
        assertBox(
            boxes,
            0x4,
            0x4 to 0x0,
            0x4 to 0x1,
            0x4 to 0x2,
            0x4 to 0x3,
            0x5 to 0x0,
            0x5 to 0x1,
            0x5 to 0x2,
            0x5 to 0x3,
            0x6 to 0x0,
            0x6 to 0x1,
            0x6 to 0x2,
            0x6 to 0x3,
            0x7 to 0x0,
            0x7 to 0x1,
            0x7 to 0x2,
            0x7 to 0x3
        )
        assertBox(
            boxes,
            0x5,
            0x4 to 0x4,
            0x4 to 0x5,
            0x4 to 0x6,
            0x4 to 0x7,
            0x5 to 0x4,
            0x5 to 0x5,
            0x5 to 0x6,
            0x5 to 0x7,
            0x6 to 0x4,
            0x6 to 0x5,
            0x6 to 0x6,
            0x6 to 0x7,
            0x7 to 0x4,
            0x7 to 0x5,
            0x7 to 0x6,
            0x7 to 0x7
        )
        assertBox(
            boxes,
            0x6,
            0x4 to 0x8,
            0x4 to 0x9,
            0x4 to 0xA,
            0x4 to 0xB,
            0x5 to 0x8,
            0x5 to 0x9,
            0x5 to 0xA,
            0x5 to 0xB,
            0x6 to 0x8,
            0x6 to 0x9,
            0x6 to 0xA,
            0x6 to 0xB,
            0x7 to 0x8,
            0x7 to 0x9,
            0x7 to 0xA,
            0x7 to 0xB
        )
        assertBox(
            boxes,
            0x7,
            0x4 to 0xC,
            0x4 to 0xD,
            0x4 to 0xE,
            0x4 to 0xF,
            0x5 to 0xC,
            0x5 to 0xD,
            0x5 to 0xE,
            0x5 to 0xF,
            0x6 to 0xC,
            0x6 to 0xD,
            0x6 to 0xE,
            0x6 to 0xF,
            0x7 to 0xC,
            0x7 to 0xD,
            0x7 to 0xE,
            0x7 to 0xF
        )
        ///////////////////////////
        assertBox(
            boxes,
            0x8,
            0x8 to 0x0,
            0x8 to 0x1,
            0x8 to 0x2,
            0x8 to 0x3,
            0x9 to 0x0,
            0x9 to 0x1,
            0x9 to 0x2,
            0x9 to 0x3,
            0xA to 0x0,
            0xA to 0x1,
            0xA to 0x2,
            0xA to 0x3,
            0xB to 0x0,
            0xB to 0x1,
            0xB to 0x2,
            0xB to 0x3
        )
        assertBox(
            boxes,
            0x9,
            0x8 to 0x4,
            0x8 to 0x5,
            0x8 to 0x6,
            0x8 to 0x7,
            0x9 to 0x4,
            0x9 to 0x5,
            0x9 to 0x6,
            0x9 to 0x7,
            0xA to 0x4,
            0xA to 0x5,
            0xA to 0x6,
            0xA to 0x7,
            0xB to 0x4,
            0xB to 0x5,
            0xB to 0x6,
            0xB to 0x7
        )
        assertBox(
            boxes,
            0xA,
            0x8 to 0x8,
            0x8 to 0x9,
            0x8 to 0xA,
            0x8 to 0xB,
            0x9 to 0x8,
            0x9 to 0x9,
            0x9 to 0xA,
            0x9 to 0xB,
            0xA to 0x8,
            0xA to 0x9,
            0xA to 0xA,
            0xA to 0xB,
            0xB to 0x8,
            0xB to 0x9,
            0xB to 0xA,
            0xB to 0xB
        )
        assertBox(
            boxes,
            0xB,
            0x8 to 0xC,
            0x8 to 0xD,
            0x8 to 0xE,
            0x8 to 0xF,
            0x9 to 0xC,
            0x9 to 0xD,
            0x9 to 0xE,
            0x9 to 0xF,
            0xA to 0xC,
            0xA to 0xD,
            0xA to 0xE,
            0xA to 0xF,
            0xB to 0xC,
            0xB to 0xD,
            0xB to 0xE,
            0xB to 0xF
        )
        ///////////////////////////
        assertBox(
            boxes,
            0xC,
            0xC to 0x0,
            0xC to 0x1,
            0xC to 0x2,
            0xC to 0x3,
            0xD to 0x0,
            0xD to 0x1,
            0xD to 0x2,
            0xD to 0x3,
            0xE to 0x0,
            0xE to 0x1,
            0xE to 0x2,
            0xE to 0x3,
            0xF to 0x0,
            0xF to 0x1,
            0xF to 0x2,
            0xF to 0x3
        )
        assertBox(
            boxes,
            0xD,
            0xC to 0x4,
            0xC to 0x5,
            0xC to 0x6,
            0xC to 0x7,
            0xD to 0x4,
            0xD to 0x5,
            0xD to 0x6,
            0xD to 0x7,
            0xE to 0x4,
            0xE to 0x5,
            0xE to 0x6,
            0xE to 0x7,
            0xF to 0x4,
            0xF to 0x5,
            0xF to 0x6,
            0xF to 0x7
        )
        assertBox(
            boxes,
            0xE,
            0xC to 0x8,
            0xC to 0x9,
            0xC to 0xA,
            0xC to 0xB,
            0xD to 0x8,
            0xD to 0x9,
            0xD to 0xA,
            0xD to 0xB,
            0xE to 0x8,
            0xE to 0x9,
            0xE to 0xA,
            0xE to 0xB,
            0xF to 0x8,
            0xF to 0x9,
            0xF to 0xA,
            0xF to 0xB
        )
        assertBox(
            boxes,
            0xF,
            0xC to 0xC,
            0xC to 0xD,
            0xC to 0xE,
            0xC to 0xF,
            0xD to 0xC,
            0xD to 0xD,
            0xD to 0xE,
            0xD to 0xF,
            0xE to 0xC,
            0xE to 0xD,
            0xE to 0xE,
            0xE to 0xF,
            0xF to 0xC,
            0xF to 0xD,
            0xF to 0xE,
            0xF to 0xF
        )
        ///////////////////////////
    }

    @Test
    @DisplayName("Boxes sizes must be the square root of grid size")
    fun testBoxSizeBySize() {
        assertEquals(2, getBoxSizeBySize(4))
        assertEquals(3, getBoxSizeBySize(9))
        assertEquals(4, getBoxSizeBySize(16))
        assertEquals(5, getBoxSizeBySize(25))
        assertThrows<IllegalArgumentException> { getBoxSizeBySize(26) }
    }

    @Test
    @DisplayName("The max conflicts for a Grid of size 'n' must be equals to 'n * ((n - 1) + sqrt(n) * (sqrt(n) - 1))'")
    fun testMaxConflictsBySize() {

        fun assertMaxConflictsBySize(size: Int) {
            val boxSize = sqrt(size.toDouble()).toInt()

            assertEquals(size * ((size - 1) + boxSize * (boxSize - 1)), getMaxConflictsBySize(size))
        }

        assertMaxConflictsBySize(4)
        assertMaxConflictsBySize(9)
        assertMaxConflictsBySize(16)
        assertMaxConflictsBySize(25)
        assertThrows<IllegalArgumentException> { getMaxConflictsBySize(26) }
    }
}