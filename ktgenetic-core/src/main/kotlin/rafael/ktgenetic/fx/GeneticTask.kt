package rafael.ktgenetic.fx

import javafx.concurrent.Task
import rafael.ktgenetic.core.Chromosome
import rafael.ktgenetic.core.utils.LogProcessorListener
import rafael.ktgenetic.core.events.ProcessorEvent
import rafael.ktgenetic.core.processor.GeneticProcessor

/**
 * A task that runs a genetic algorithm.
 *
 * @param C The type of the chromosomes in the genetic algorithm.
 * @property processor The genetic processor to be used in the task.
 * @constructor Creates a new genetic task with the given processor.
 */
internal class GeneticTask<C : Chromosome<*>>(private val processor: GeneticProcessor<*, C>) :
    Task<ProcessorEvent<C>>() {

    /**
     * Calls the genetic processor to start processing.
     *
     * @return The event generated by the processor.
     */
    override fun call(): ProcessorEvent<C> {
        processor.addListener(LogProcessorListener())

        return processor.process()
    }

    /**
     * Cancels the task.
     *
     * @param mayInterruptIfRunning Whether the task should be interrupted if it is currently running.
     * @return `true` if the task was cancelled successfully; `false` otherwise.
     */
    override fun cancel(mayInterruptIfRunning: Boolean): Boolean {
        processor.continueProcessing = false
        return super.cancel(mayInterruptIfRunning)
    }

}
